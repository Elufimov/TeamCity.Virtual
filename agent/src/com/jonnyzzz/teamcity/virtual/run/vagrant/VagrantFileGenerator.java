/*
 * Copyright 2000-2014 Eugene Petrenko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jonnyzzz.teamcity.virtual.run.vagrant;

import com.jonnyzzz.teamcity.virtual.VMConstants;
import com.jonnyzzz.teamcity.virtual.util.util.BuildProcessBase;
import com.jonnyzzz.teamcity.virtual.util.util.TryFinallyBuildProcess;
import jetbrains.buildServer.RunBuildException;
import jetbrains.buildServer.agent.BuildFinishedStatus;
import jetbrains.buildServer.agent.BuildProgressLogger;
import jetbrains.buildServer.util.FileUtil;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.IOException;

/**
 * @author Eugene Petrenko (eugene.petrenko@gmail.com)
 */
public class VagrantFileGenerator {

  public void generateVagrantFile(@NotNull final VagrantContext context,
                                  @NotNull final BuildProgressLogger logger,
                                  @NotNull final File originalVagrantFileDir,
                                  @NotNull final TryFinallyBuildProcess builder,
                                  @NotNull final WithGeneratedVagrantfile continuation) throws RunBuildException {

    builder.addTryProcess(new BuildProcessBase() {
      @NotNull
      @Override
      protected BuildFinishedStatus waitForImpl() throws RunBuildException {
        final File baseDir = createTempDir(originalVagrantFileDir);

        final File vagrantFile = new File(baseDir, VMConstants.VAGRANT_FILE);
        final File mountRoot = context.getCheckoutDirectory();

        final String relativePath = context.getRootPath() + FileUtil.getRelativePath(mountRoot, context.getWorkingDirectory());

        final String text = generateVagrantfile(mountRoot, relativePath);
        writeVagrantFile(vagrantFile, text);

        builder.addFinishProcess(new BuildProcessBase() {
          @NotNull
          @Override
          protected BuildFinishedStatus waitForImpl() throws RunBuildException {
            FileUtil.delete(baseDir);
            return BuildFinishedStatus.FINISHED_SUCCESS;
          }
        });

        continuation.execute(vagrantFile, relativePath);
        return BuildFinishedStatus.FINISHED_SUCCESS;
      }

      private void writeVagrantFile(@NotNull final File vagrantFile,
                                    @NotNull final String text) throws RunBuildException {
        logger.activityStarted("generate", "Generated Vagrantfile", "vagrant");
        logger.message(text);
        logger.activityFinished("generate", "vagrant");

        try {
          FileUtil.writeFileAndReportErrors(vagrantFile, text);
        } catch (IOException e) {
          throw new RunBuildException("Failed to create Vargantfile. " + e.getMessage(), e);
        }
      }

      @NotNull
      private File createTempDir(@NotNull final File originalVagrantFileDir) throws RunBuildException {
        File baseDir;
        try {
          baseDir = FileUtil.createTempDirectory("Vagrant", "teamcity", originalVagrantFileDir);
        } catch (IOException e) {
          throw new RunBuildException("Failed to create temp directory in " + originalVagrantFileDir);
        }
        return baseDir;
      }

    });
  }

  @NotNull
  private static String generateVagrantfile(@NotNull final File mountRoot,
                                            @NotNull final String destRoot) {
    return "## Generated by TeamCity.Virtual plugin\n" +
            "Vagrant.configure(\"2\") do |config|\n" +
            "  config.vm.synced_folder \"" + mountRoot.getPath() + "\", \"" + destRoot + "\"\n" +
            "end\n";
  }

  public interface WithGeneratedVagrantfile {
    void execute(@NotNull final File generatedVagrantFile,
                 @NotNull final String machinePathToWork) throws RunBuildException;
  }

}
